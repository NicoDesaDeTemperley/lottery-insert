// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using loterry_console.Models;
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Data;
using System.Threading;
using System.Threading.Tasks;

namespace loterry_console.Models
{
    public partial class quinielaContext
    {
        private IquinielaContextProcedures _procedures;

        public virtual IquinielaContextProcedures Procedures
        {
            get
            {
                if (_procedures is null) _procedures = new quinielaContextProcedures(this);
                return _procedures;
            }
            set
            {
                _procedures = value;
            }
        }

        public IquinielaContextProcedures GetProcedures()
        {
            return Procedures;
        }

        protected void OnModelCreatingGeneratedProcedures(ModelBuilder modelBuilder)
        {
        }
    }

    public partial class quinielaContextProcedures : IquinielaContextProcedures
    {
        private readonly quinielaContext _context;

        public quinielaContextProcedures(quinielaContext context)
        {
            _context = context;
        }

        public virtual async Task<int> insert_datos_quinielaAsync(string Nombre, int? Previa, int? Primera, int? Matutina, int? Vespertina, int? Tarde, int? Nocturna, string FechaDiaPublicacion, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Nombre",
                    Size = 50,
                    Value = Nombre ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Previa",
                    Value = Previa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Primera",
                    Value = Primera ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Matutina",
                    Value = Matutina ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Vespertina",
                    Value = Vespertina ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Tarde",
                    Value = Tarde ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Nocturna",
                    Value = Nocturna ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "FechaDiaPublicacion",
                    Size = 50,
                    Value = FechaDiaPublicacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[insert_datos_quiniela] @Nombre, @Previa, @Primera, @Matutina, @Vespertina, @Tarde, @Nocturna, @FechaDiaPublicacion", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }
    }
}
